syntax = "proto3";
package inner.inner;

import "common/common.proto";

option java_multiple_files = false;
option java_package = "com.example.proto.inner.inner";
option java_outer_classname = "Inner";

enum RouteType {
    ROUTE_TYPE_NUL = 0;
    NORMAL = 1;
    CMD = 2;
}

message RouteMsgReq {
    // 目标id
    string to_uid = 1;
    // 消息
    common.common.Msg msg = 2;
    RouteType type = 3;
}

message RouteMsgResp {
    // 结果
    common.common.ErrorMsg ret = 1;
}

message GuidUidBinder {
    int64 uid = 1;
    int64 guid = 2;
}

message BatchRouteMsgReq {
    // 目标id
    repeated GuidUidBinder to_uid = 1;
    // 消息，因为群发消息内容是一样的，所以就不在chat里循环调用了，网络开销比较大
    common.common.Msg msg = 2;
}

message BatchRouteMsgResp {
    // 结果
    common.common.ErrorMsg ret = 1;
}

message GetNodeAddresssReq {
    // nul
}

message GetNodeAddresssResp {
    // 结果
    common.common.ErrorMsg ret = 1;
    // ip
    string host = 2;
    // port
    string port = 3;
}

service ConnectorService {
    // 获取可用的connector节点信息
    rpc GetNodeAddress (GetNodeAddresssReq) returns (GetNodeAddresssResp);
}

service PushService {
    // 找到用户所在netty节点，转发消息
    rpc RouteMsg (RouteMsgReq) returns (RouteMsgResp);
    // batch route
    rpc BatchRouteMsg (BatchRouteMsgReq) returns (BatchRouteMsgResp);
}