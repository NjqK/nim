syntax = "proto3";
package outer.outer;

import "common/common.proto";

option java_multiple_files = false;
option java_package = "com.example.proto.outer.outer";
option java_outer_classname = "Outer";

// 单聊消息请求
message SendMsgIndividuallyReq {
    // 用户id
    string to_uid = 1;
    // 发送者
    string from_uid = 2;
    // 消息
    string msg_content = 3;
    // 消息类型
    common.common.MsgType msg_type = 4;
    // 消息内容类型
    common.common.MsgContentType msg_content_type = 5;
}

// 单聊消息响应
message SendMsgIndividuallyResp {
    // 结果
    common.common.ErrorMsg ret = 1;
}

// 群发请求
message DoGroupSendingReq {
    // 用户id
    repeated string to_uids = 1;
    // 发送者
    string from_uid = 2;
    // 消息
    string msg_content = 3;
}

// 群发响应
message DoGroupSendingResp {
    // 结果
    common.common.ErrorMsg ret = 1;
}

// 获取未读消息请求
message GetUnreadMsgReq {
    // 用户id
    string uid = 1;
    // 用户收到的最大的guid
    string max_guid = 2;
}

// 获取未读消息响应
message GetUnreadMsgResp {
    // 结果
    common.common.ErrorMsg ret = 1;
    // 消息
    repeated common.common.Msg msgs = 2;
}

// 获取可用netty服务请求
message GetAvailableNodeReq {

}

// 获取可用netty服务响应
message GetAvailableNodeResp {
    // 结果
    common.common.ErrorMsg ret = 1;
    // ip
    string host = 2;
    // port
    string port = 3;
}

message AckMsgReq {
    string uid = 1;
    string guid = 2;
}

message AckMsgResp {
    // 结果
    common.common.ErrorMsg ret = 1;
}

service ChatService {
    // 单发消息
    rpc SendMsgIndividually (SendMsgIndividuallyReq) returns (SendMsgIndividuallyResp);
    // 群发
    rpc DoGroupSending (DoGroupSendingReq) returns (DoGroupSendingResp);
    // 拉取消息
    rpc GetUnreadMsg (GetUnreadMsgReq) returns (GetUnreadMsgResp);
    // 获取可用的netty服务节点信息
    rpc GetAvailableNode (GetAvailableNodeReq) returns (GetAvailableNodeResp);
    // 确认收到消息
    rpc AckMsg (AckMsgReq) returns (AckMsgResp);
}